{"version":3,"sources":["list-items.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["ListItems","props","listItems","items","map","item","className","classes","list","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","state","currentItem","addItem","preventDefault","newItem","setState","handleInput","Date","now","filteredItems","filter","console","log","todo","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"+RAgCeA,EA3BG,SAACC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAWC,IAAQC,KAAMC,IAAKJ,EAAKI,KAC3C,6BACI,2BAAOC,KAAK,OAAOC,GAAIN,EAAKI,IAAKG,MAAOP,EAAKQ,KAAMC,SAAU,SAACC,GAC1Dd,EAAMe,UAAUD,EAAEE,OAAOL,MAAOP,EAAKI,QAGzC,8BACI,kBAAC,IAAD,CAAkBS,QAAS,WACvBjB,EAAMkB,WAAWd,EAAKI,MACvBW,KAAK,gBAOxB,OAAO,6BACH,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC3BpB,K,eCpBbqB,IAAQC,IAAIC,K,IA6EGC,E,4MAzEbC,MAAQ,CACNxB,MAAO,GACPyB,YAAa,CACXf,KAAM,GACNJ,IAAK,K,EAGToB,QAAU,SAACd,GACTA,EAAEe,iBACF,IAAMC,EAAU,EAAKJ,MAAMC,YAC3B,GAAqB,KAAjBG,EAAQlB,KAAa,CACvB,IAAMV,EAAK,sBAAO,EAAKwB,MAAMxB,OAAlB,CAAyB4B,IACpC,EAAKC,SAAS,CACZ7B,MAAOA,EACPyB,YAAa,CACXf,KAAM,GACNJ,IAAK,Q,EAMbwB,YAAc,SAAClB,GACb,EAAKiB,SAAS,CACZJ,YAAa,CACXf,KAAME,EAAEE,OAAOL,MACfH,IAAKyB,KAAKC,U,EAIhBhB,WAAa,SAACV,GACZ,IAAM2B,EAAgB,EAAKT,MAAMxB,MAAMkC,QAAO,SAAAhC,GAAI,OAChDA,EAAKI,MAAQA,KACf,EAAKuB,SAAS,CACZ7B,MAAOiC,K,EAIXpB,UAAY,SAACH,EAAMJ,GACjB6B,QAAQC,IAAI,SAAW,EAAKZ,MAAMxB,OAClC,IAAMA,EAAQ,EAAKwB,MAAMxB,MACzBA,EAAMC,KAAI,SAAAC,GACJA,EAAKI,MAAQA,IACf6B,QAAQC,IAAIlC,EAAKI,IAAM,OAASA,GAChCJ,EAAKQ,KAAOA,MAGhB,EAAKmB,SAAS,CACZ7B,MAAOA,K,uDAMT,OACE,yBAAKG,UAAWC,IAAQmB,KACtB,gCACE,0CACA,0BAAMpB,UAAWC,IAAQiC,KAAMC,SAAUC,KAAKb,SAC5C,2BAAOnB,KAAK,OAAOiC,YAAY,aAAa/B,MAAO8B,KAAKf,MAAMC,YAAYf,KAAMC,SAAU4B,KAAKT,cAC/F,4BAAQvB,KAAK,UAAb,QAEF,2BAAIgC,KAAKf,MAAMxB,MAAMU,MAErB,kBAAC,EAAD,CAAWV,MAAOuC,KAAKf,MAAMxB,MAAOgB,WAAYuB,KAAKvB,WAAYH,UAAW0B,KAAK1B,kB,GAlEzE4B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a,kBExI5BC,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,oB","file":"static/js/main.dd40676a.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './list-items.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nconst ListItems = (props) => {\r\n    const items = props.items;\r\n    const listItems = items.map(item => {\r\n        return <div className={classes.list} key={item.key}>\r\n            <div>\r\n                <input type=\"text\" id={item.key} value={item.text} onChange={(e) => {\r\n                    props.setUpdate(e.target.value, item.key)\r\n                }} />\r\n                \r\n                <span>\r\n                    <FontAwesomeIcon  onClick={() => {\r\n                        props.deleteItem(item.key)\r\n                    }} icon=\"trash\" />\r\n                </span>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    })\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n        </FlipMove>\r\n\r\n    </div>;\r\n}\r\n\r\nexport default ListItems;","import React, { Component } from 'react';\r\nimport classes from './App.module.css';\r\nimport ListItems from './list-items'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    items: [],\r\n    currentItem: {\r\n      text: '',\r\n      key: ''\r\n    }\r\n}\r\n  addItem = (e) => {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    if (newItem.text !== \"\") {\r\n      const items = [...this.state.items, newItem];\r\n      this.setState({\r\n        items: items,\r\n        currentItem: {\r\n          text: '',\r\n          key: ''\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    this.setState({\r\n      currentItem: {\r\n        text: e.target.value,\r\n        key: Date.now()\r\n      }\r\n    })\r\n  }\r\n  deleteItem = (key) => {\r\n    const filteredItems = this.state.items.filter(item =>\r\n      item.key !== key);\r\n    this.setState({\r\n      items: filteredItems\r\n    })\r\n\r\n  }\r\n  setUpdate = (text, key) => {\r\n    console.log(\"items:\" + this.state.items);\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if (item.key === key) {\r\n        console.log(item.key + \"    \" + key)\r\n        item.text = text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.App}>\r\n        <header>\r\n          <h1>To-do List</h1>\r\n          <form className={classes.todo} onSubmit={this.addItem}>\r\n            <input type=\"text\" placeholder=\"Enter task\" value={this.state.currentItem.text} onChange={this.handleInput}></input>\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n          <p>{this.state.items.text}</p>\r\n\r\n          <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate} />\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.module.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__19hQd\",\"todo\":\"App_todo__1qlS0\"};"],"sourceRoot":""}